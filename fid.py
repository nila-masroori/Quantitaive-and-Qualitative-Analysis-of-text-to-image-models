# -*- coding: utf-8 -*-
"""FID.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i6SQ_fxUmeZ7jNXJgqKmMkw4u2oePg45
"""

!git clone https://github.com/SumitTarafder/Text-to-Image_Analysis.git

from google.colab import drive
drive.mount('/content/drive/')

!pip install pytorch-fid

import os
import random
#random.seed(0)
import shutil
from tqdm import tqdm

# generated_dir = '/content/drive/MyDrive/Project-AML/Face-extraction'
# generated_dir = '/content/drive/MyDrive/Project-AML/extracted_eyes'
# generated_dir = '/content/drive/MyDrive/Project-AML/extracted_mouths'
# generated_dir = '/content/drive/MyDrive/Project-AML/extracted_noses'
generated_dir='/content/drive/MyDrive/Project-AML/LAFITE_Flickr30_motion'# the path to save the extracted/generated face images

generated_files = os.listdir(generated_dir)

print(f'Number of generated faces: {len(generated_files)}')

#Sample this number of real faces into a temp folder
real_dir = '/content/drive/MyDrive/Project-AML/flickr30k_images/motion_images'#groundtruth images
# real_dir = '/content/Text-to-Image_Analysis/Stable_Diffusion_Analysis/extracted_eyes'
# real_dir = '/content/Text-to-Image_Analysis/Stable_Diffusion_Analysis/extracted_mouth'
# real_dir = '/content/Text-to-Image_Analysis/Stable_Diffusion_Analysis/extracted_noses'
sample_dir = 'temp_faces'

#sample from real faces/eyes/mouths/noses
number_images_to_sample = len(generated_files)
real_files = os.listdir(real_dir)

def sample_random_images(N=number_images_to_sample, real_files=real_files, real_dir=real_dir, sample_dir=sample_dir):
  if os.path.exists(sample_dir):
    shutil.rmtree(sample_dir)
  os.makedirs(sample_dir)

  sampled_list = random.sample(real_files, N)
  print("Sampling...")
  for sample_img in tqdm(sampled_list):
    shutil.copy(os.path.join(real_dir, sample_img), sample_dir)
  #print(f'Run fid between: {os.path.abspath(sample_dir)} and {os.path.abspath(generated_dir)}')

import cv2

number_images_to_sample = len(generated_files)
real_files = os.listdir(real_dir)

def sample_random_images(N=number_images_to_sample, real_files=real_files, real_dir=real_dir, sample_dir=sample_dir, new_width=250, new_height=250):
  if os.path.exists(sample_dir):
    shutil.rmtree(sample_dir)
  os.makedirs(sample_dir)

  sampled_list = random.sample(real_files, N)
  print("Sampling...")
  for sample_img in tqdm(sampled_list):
    # shutil.copy(os.path.join(real_dir, sample_img), sample_dir)
    img = cv2.imread(os.path.join(real_dir, sample_img))
    img = cv2.resize(img, (new_width, new_height))
    cv2.imwrite(os.path.join(sample_dir, sample_img), img)

for _ in range(10):
    sample_random_images()
    !python -m pytorch_fid "$sample_dir" "$generated_dir" --device cuda:0

"""Copy the above console output into the string variable below:

"""

console_output ="""
Sampling...

100%|██████████| 5206/5206 [02:21<00:00, 36.66it/s]

Downloading: "https://github.com/mseitzer/pytorch-fid/releases/download/fid_weights/pt_inception-2015-12-05-6726825d.pth" to /root/.cache/torch/hub/checkpoints/pt_inception-2015-12-05-6726825d.pth
100% 91.2M/91.2M [00:01<00:00, 60.3MB/s]
100% 105/105 [00:21<00:00,  4.84it/s]
100% 105/105 [02:09<00:00,  1.23s/it]
FID:  28.29662944052984
Sampling...

100%|██████████| 5206/5206 [00:39<00:00, 132.82it/s]

100% 105/105 [00:21<00:00,  4.85it/s]
100% 105/105 [00:34<00:00,  3.03it/s]
FID:  28.29662944052984
Sampling...

100%|██████████| 5206/5206 [00:39<00:00, 130.42it/s]

100% 105/105 [00:21<00:00,  4.78it/s]
100% 105/105 [00:32<00:00,  3.23it/s]
FID:  28.29662944052984
Sampling...

100%|██████████| 5206/5206 [00:40<00:00, 130.06it/s]

100% 105/105 [00:22<00:00,  4.76it/s]
100% 105/105 [00:34<00:00,  3.01it/s]
FID:  28.29662944052984
Sampling...

100%|██████████| 5206/5206 [00:40<00:00, 127.22it/s]

100% 105/105 [00:22<00:00,  4.76it/s]
100% 105/105 [00:32<00:00,  3.21it/s]
FID:  28.29662944052984
Sampling...

100%|██████████| 5206/5206 [00:39<00:00, 130.54it/s]

100% 105/105 [00:21<00:00,  4.78it/s]
100% 105/105 [00:34<00:00,  3.02it/s]
FID:  28.29662944052984
Sampling...

100%|██████████| 5206/5206 [00:39<00:00, 130.84it/s]

100% 105/105 [00:22<00:00,  4.76it/s]
100% 105/105 [00:32<00:00,  3.28it/s]
FID:  28.29662944052984
Sampling...

100%|██████████| 5206/5206 [00:39<00:00, 131.79it/s]

100% 105/105 [00:21<00:00,  4.78it/s]
100% 105/105 [00:34<00:00,  3.07it/s]
FID:  28.29662944052984
Sampling...

100%|██████████| 5206/5206 [00:40<00:00, 129.73it/s]

100% 105/105 [00:21<00:00,  4.77it/s]
100% 105/105 [00:32<00:00,  3.26it/s]
FID:  28.29662944052984
"""

console_output = """
Sampling...
100%|██████████| 10000/10000 [01:24<00:00, 118.95it/s]
Sample directory: temp_faces
Generated directory: /content/drive/MyDrive/Project-AML/Stable diffusion/Flickr30k/New_17k_Face_Motion_Unfiltered/Gen_Faces
Downloading: "https://github.com/mseitzer/pytorch-fid/releases/download/fid_weights/pt_inception-2015-12-05-6726825d.pth" to /root/.cache/torch/hub/checkpoints/pt_inception-2015-12-05-6726825d.pth
100% 91.2M/91.2M [00:01<00:00, 53.2MB/s]
100% 200/200 [00:40<00:00,  4.96it/s]
100% 258/258 [04:50<00:00,  1.13s/it]
FID:  23.04964980096844
"""

# Sampling...

# 100%|██████████| 10000/10000 [2:10:32<00:00,  1.28it/s]

# Downloading: "https://github.com/mseitzer/pytorch-fid/releases/download/fid_weights/pt_inception-2015-12-05-6726825d.pth" to /root/.cache/torch/hub/checkpoints/pt_inception-2015-12-05-6726825d.pth
# 100% 91.2M/91.2M [00:06<00:00, 15.8MB/s]
# 100% 200/200 [00:39<00:00,  5.03it/s]
# 100% 390/390 [06:04<00:00,  1.07it/s]
# FID:  42.58265784758356
# Sampling...

# 100%|██████████| 10000/10000 [29:52<00:00,  5.58it/s]

# 100% 200/200 [00:39<00:00,  5.03it/s]
# 100% 390/390 [01:29<00:00,  4.34it/s]
# FID:  42.587453408804606
# Sampling...

# 100%|██████████| 10000/10000 [07:32<00:00, 22.12it/s]

# 100% 200/200 [00:39<00:00,  5.00it/s]
# 100% 390/390 [01:31<00:00,  4.26it/s]
# FID:  42.63154365302415
# Sampling...

# 100%|██████████| 10000/10000 [02:45<00:00, 60.33it/s]

# 100% 200/200 [00:40<00:00,  4.90it/s]
# 100% 390/390 [01:30<00:00,  4.31it/s]
# FID:  42.66436844716577
# Sampling...

# 100%|██████████| 10000/10000 [01:38<00:00, 101.38it/s]

# 100% 200/200 [00:41<00:00,  4.84it/s]
# 100% 390/390 [01:32<00:00,  4.22it/s]
# FID:  42.76378745051386
# Sampling...

# 100%|██████████| 10000/10000 [01:14<00:00, 133.72it/s]

# 100% 200/200 [00:41<00:00,  4.79it/s]
# 100% 390/390 [01:32<00:00,  4.21it/s]
# FID:  42.78984947669636
# Sampling...

# 100%|██████████| 10000/10000 [01:14<00:00, 134.18it/s]

# 100% 200/200 [00:41<00:00,  4.79it/s]
# 100% 390/390 [01:33<00:00,  4.16it/s]
# FID:  42.70689548321036
# Sampling...

# 100%|██████████| 10000/10000 [01:13<00:00, 135.17it/s]

# 100% 200/200 [00:41<00:00,  4.81it/s]
# 100% 390/390 [01:34<00:00,  4.15it/s]
# FID:  42.37065902407221
# Sampling...

# 100%|██████████| 10000/10000 [01:13<00:00, 135.29it/s]

# 100% 200/200 [00:41<00:00,  4.79it/s]
# 100% 390/390 [01:32<00:00,  4.21it/s]
# FID:  42.852841570738065
# Sampling...

# 100%|██████████| 10000/10000 [01:13<00:00, 135.49it/s]

# 100% 200/200 [00:42<00:00,  4.75it/s]
# 100% 390/390 [01:36<00:00,  4.04it/s]
# FID:  42.62216867507527

#faces for LAFITE COCO
temp1 = [console_output.split("FID:  ")[i] for i in range(len(console_output.split("FID:  "))) if i != 0]
[float(temp1[i].split("\n")[0]) for i in range(len(temp1))]

#faces for LAFITE Flickr30
temp1 = [console_output.split("FID:  ")[i] for i in range(len(console_output.split("FID:  "))) if i != 0]
[float(temp1[i].split("\n")[0]) for i in range(len(temp1))]

#faces for LAFITE Stable diffusion
temp1 = [console_output.split("FID:  ")[i] for i in range(len(console_output.split("FID:  "))) if i != 0]
[float(temp1[i].split("\n")[0]) for i in range(len(temp1))]

#eyes
temp1 = [console_output.split("FID:  ")[i] for i in range(len(console_output.split("FID:  "))) if i != 0]
[float(temp1[i].split("\n")[0]) for i in range(len(temp1))]

#mouths
temp1 = [console_output.split("FID:  ")[i] for i in range(len(console_output.split("FID:  "))) if i != 0]
[float(temp1[i].split("\n")[0]) for i in range(len(temp1))]

#noses
temp1 = [console_output.split("FID:  ")[i] for i in range(len(console_output.split("FID:  "))) if i != 0]
[float(temp1[i].split("\n")[0]) for i in range(len(temp1))]

#motion Flick30k FID for stable diffusion
temp1 = [console_output.split("FID:  ")[i] for i in range(len(console_output.split("FID:  "))) if i != 0]
[float(temp1[i].split("\n")[0]) for i in range(len(temp1))]

