# -*- coding: utf-8 -*-
"""Mouth Extraction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aHEO1xVQjOblLQeFuNNhDHNDkJe_b-8g

This code is for extracting mouths from the face images that are generated by text to image models.
"""

from google.colab import drive
drive.mount('/content/drive')

from keras.models import load_model
!pip install mtcnn
# confirm mtcnn was installed correctly
import mtcnn
# print version
print(mtcnn.__version__)

import numpy as np
from mtcnn.mtcnn import MTCNN
from numpy import asarray
#!pip install pycocotools
import io
import os
from pycocotools.coco import COCO
from PIL import Image
import matplotlib.pyplot as plt


# Simple python package to shut up Tensorflow warnings and logs.
!pip install silence_tensorflow
import silence_tensorflow.auto

import os

# project_folder = "/content/drive/MyDrive/adv_ml_project_vt"
extracted_mouths_folder = '/content/drive/MyDrive/Project-AML/extracted_mouths2'# the path to save the extracted mouth images

# extract mouths from extracted_face_image
def extract_mouth_from_extratced_face(filename, index, required_size = (300, 150)):
    # load image from file
    image = Image.open(filename)
    # convert to RGB, if needed
    image = image.convert('RGB')
    # convert to array
    pixels = np.asarray(image)
    # create the detector, using default weights
    detector = MTCNN()
    # detect faces in the image
    results = detector.detect_faces(pixels)
    if len(results)>=1:
        #print(results)
        mouth_width = abs(results[0]['keypoints']['mouth_left'][0] - results[0]['keypoints']['mouth_right'][0])
    else:
        return False
    if mouth_width>=35:
        #print(results[0])
        try:
            xmouth= results[0]['keypoints']['mouth_left'][0]-5
            ymouth = results[0]['keypoints']['mouth_left'][1]-10
            width = results[0]['keypoints']['mouth_right'][0] +5
            height = int(results[0]['keypoints']['mouth_left'][1] + results[0]['keypoints']['mouth_left'][0]/2)-5
            mouth = pixels[ymouth:height, xmouth:width]
            # resize pixels to the model size
            image = Image.fromarray(mouth)
            image = image.resize(required_size)
            mouth_array = np.asarray(image)
            #plt.imshow(mouth_array)
            plt.imsave(os.path.join(extracted_mouths_folder, 'mouth_img_{}.jpg'.format(index)),mouth_array)
            return True
        except:
            None
    return False

files = os.listdir('/content/drive/MyDrive/Project-AML/10kfaces')

len(files)

index = 0
for file in files:
    if extract_mouth_from_extratced_face(os.path.join('/content/drive/MyDrive/Project-AML/10kfaces',file), index = index):
        print("----------" + str(index) + "----------")
        index += 1

print(len(os.listdir(extracted_mouths_folder)))

