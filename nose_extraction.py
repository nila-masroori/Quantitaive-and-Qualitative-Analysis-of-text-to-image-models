# -*- coding: utf-8 -*-
"""nose extraction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R1RKQk2ETMZ2urdVO1Yl8f9G9ng1d-X1
"""

from google.colab import drive
drive.mount('/content/drive')

from keras.models import load_model
!pip install mtcnn
# confirm mtcnn was installed correctly
import mtcnn
# print version
print(mtcnn.__version__)

import numpy as np
from mtcnn.mtcnn import MTCNN
from numpy import asarray
#!pip install pycocotools
import io
import os
from pycocotools.coco import COCO
from PIL import Image
import matplotlib.pyplot as plt


# Simple python package to shut up Tensorflow warnings and logs.
!pip install silence_tensorflow
import silence_tensorflow.auto

import os
extracted_noses_dir = '/content/drive/MyDrive/Project-AML/extracted_noses2'# the path to save the extracted nose images
if not os.path.exists(extracted_noses_dir):
    # If it doesn't exist, create it
    os.makedirs(extracted_noses_dir)

# extract noses from extracted_face_image
def extract_nose_from_extratced_face(filename, index, required_size = (200,200)):
    # load image from file
    image = Image.open(filename)
    # convert to RGB, if needed
    image = image.convert('RGB')
    # convert to array
    pixels = np.asarray(image)
    # create the detector, using default weights
    detector = MTCNN()
    # detect faces in the image
    results = detector.detect_faces(pixels)
    # extract the bounding box from the first face
    try:
        if len(results)>=1:
            #print(results[0])
            xnose= results[0]['keypoints']['nose'][0]-35
            ynose = results[0]['keypoints']['nose'][1]+15
            width = results[0]['keypoints']['nose'][0] +35
            height = int((results[0]['keypoints']['left_eye'][1]+results[0]['keypoints']['right_eye'][1])/2)+10
            nose = pixels[height:ynose, xnose:width]
            # resize pixels to the model size
            image = Image.fromarray(nose)
            image = image.resize(required_size)
            nose_array = np.asarray(image)
            plt.imshow(nose_array)
            plt.imsave(os.path.join(extracted_noses_dir, 'extracted_nose_img_{}.jpg'.format(index)),nose_array)
            return True
    except:
        None
    return False

files = os.listdir('/content/drive/MyDrive/Project-AML/10kfaces/face_images-Flickr-groundtruth')#extract from our generated faces
# files = os.listdir('/content/drive/MyDrive/Project-AML/Extracted_faces_from_COCO')#extract faces from faces from coco dataset

len(os.listdir('/content/drive/MyDrive/Project-AML/extracted_noses2'))

print(len(files))

index =8339
for i in range(len(files)):
  if i>=12888:
    print(files.index(files[i]))
    if extract_nose_from_extratced_face(os.path.join('/content/drive/MyDrive/Project-AML/10kfaces/face_images-Flickr-groundtruth',files[i]), index = index):
      print("-------------------------------" + str(index) + "--------------------------------")
      index += 1

